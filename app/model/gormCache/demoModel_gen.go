// Code generated by goctl. DO NOT EDIT!

package gormCache

import (
	"context"
	"fmt"
	"time"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"laravel-single/app/common/gormc"
)

var (
	cacheLaravelSingleDemoIdPrefix     = "cache:laravelSingle:demo:id:"
	cacheLaravelSingleDemoUserIdPrefix = "cache:laravelSingle:demo:userId:"
)

type (
	demoModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Demo) error

		FindOne(ctx context.Context, id int64) (*Demo, error)
		FindOneByUserId(ctx context.Context, userId int64) (*Demo, error)
		Update(ctx context.Context, tx *gorm.DB, data *Demo) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultDemoModel struct {
		gormc.CachedConn
		table string
	}

	Demo struct {
		Id         int64     `gorm:"column:id"`
		UserId     int64     `gorm:"column:user_id"`     // 关联user表主键id
		PictureUrl string    `gorm:"column:picture_url"` // 图片链接[image]
		VideoUrl   string    `gorm:"column:video_url"`   // 视频链接[video]
		IsDisplay  int64     `gorm:"column:is_display"`  // (用户端)是否显示[check]：1=不显示、2=显示、0=全部：默认=1
		Sort       int64     `gorm:"column:sort"`        // (降序)排序
		CreatedAt  time.Time `gorm:"column:created_at"`  // 创建时间
		UpdatedAt  time.Time `gorm:"column:updated_at"`  // 更新时间
		IsDel      int64     `gorm:"column:is_del"`      // 是否删除:1=否、2=是、0=全部：默认=1
	}
)

func (Demo) TableName() string {
	return "`demo`"
}

func newDemoModel(conn *gorm.DB, c cache.CacheConf) *defaultDemoModel {
	return &defaultDemoModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`demo`",
	}
}

func (m *defaultDemoModel) Insert(ctx context.Context, tx *gorm.DB, data *Demo) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDemoModel) FindOne(ctx context.Context, id int64) (*Demo, error) {
	laravelSingleDemoIdKey := fmt.Sprintf("%s%v", cacheLaravelSingleDemoIdPrefix, id)
	var resp Demo
	err := m.QueryCtx(ctx, &resp, laravelSingleDemoIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Demo{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDemoModel) FindOneByUserId(ctx context.Context, userId int64) (*Demo, error) {
	laravelSingleDemoUserIdKey := fmt.Sprintf("%s%v", cacheLaravelSingleDemoUserIdPrefix, userId)
	var resp Demo
	err := m.QueryRowIndexCtx(ctx, &resp, laravelSingleDemoUserIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Demo{}).Where("`user_id` = ?", userId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDemoModel) Update(ctx context.Context, tx *gorm.DB, data *Demo) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultDemoModel) getCacheKeys(data *Demo) []string {
	if data == nil {
		return []string{}
	}
	laravelSingleDemoIdKey := fmt.Sprintf("%s%v", cacheLaravelSingleDemoIdPrefix, data.Id)
	laravelSingleDemoUserIdKey := fmt.Sprintf("%s%v", cacheLaravelSingleDemoUserIdPrefix, data.UserId)
	cacheKeys := []string{
		laravelSingleDemoIdKey, laravelSingleDemoUserIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultDemoModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Demo{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultDemoModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultDemoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLaravelSingleDemoIdPrefix, primary)
}

func (m *defaultDemoModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Demo{}).Where("`id` = ?", primary).Take(v).Error
}
